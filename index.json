[{"categories":["Coding"],"content":"本篇文章基于阮一峰：常用Git命令清单进行了适当修改。主要攫取了我日常使用过程中可能会经常使用的命令做了一个记录。 ","date":"2023-09-03","objectID":"/commongit/:0:0","tags":["git","little page"],"title":"CommonGit | 个人用常见git命令记录","uri":"/commongit/"},{"categories":["Coding"],"content":"0 SSH连接Git服务器 首先需要我们在本地生成ssh的公钥私钥： $ ssh-keygen -t rsa -C \"xx@xx.com\" -t 指定密钥类型，默认是 rsa -C 设置注释文字 接着在 ~/.ssh 文件夹中即可找到刚才生成的公私钥，把公钥提交到GitHub网页即可。 ","date":"2023-09-03","objectID":"/commongit/:1:0","tags":["git","little page"],"title":"CommonGit | 个人用常见git命令记录","uri":"/commongit/"},{"categories":["Coding"],"content":"1 新建代码库 # 在当前目录新建一个Git代码库 $ git init # 新建一个目录并将其初始化为Git代码库 $ git init [project-name] # 下载克隆项目到本地 $ git clone [url] ","date":"2023-09-03","objectID":"/commongit/:2:0","tags":["git","little page"],"title":"CommonGit | 个人用常见git命令记录","uri":"/commongit/"},{"categories":["Coding"],"content":"2 增加/删除文件 # 将文件添加到暂存区 $ git add [file] # 删除工作区文件，并提交到暂存区 $ git rm [file] # 停止追踪指定文件，但保留该文件留在工作区 $ git rm --cached [file] # 将文件改名 $ git mv [file-original] [file-renamed] ","date":"2023-09-03","objectID":"/commongit/:3:0","tags":["git","little page"],"title":"CommonGit | 个人用常见git命令记录","uri":"/commongit/"},{"categories":["Coding"],"content":"3 代码提交 # 将代码提交至仓库区 $ git commit -m [\"message\"] # 使用一次新的commit代替上次提交 $ git commit --amend -m [\"message\"] ","date":"2023-09-03","objectID":"/commongit/:4:0","tags":["git","little page"],"title":"CommonGit | 个人用常见git命令记录","uri":"/commongit/"},{"categories":["Coding"],"content":"4 仓库分支 # 列出本地分支 $ git branch # 列出所有远程分支 $ git branch -r # 列出所有分支，包括远程和本地 $ git branch -a # 新建一个分支，并于指定的远程分支建立追踪关系 $ git branch --track [branch] [remote-branch] # 将一个现有分支与远程分支建立追踪关系 $ git branch --set-upstream [branch] [remote-branch] # 切换到指定分支 $ git checkout [branch] # 合并指定分支到当前分支 $ git merge [branch] # 删除分支 $ git branch -d [branch] # 删除远程分支 $ git push origin --delete [branch] ","date":"2023-09-03","objectID":"/commongit/:5:0","tags":["git","little page"],"title":"CommonGit | 个人用常见git命令记录","uri":"/commongit/"},{"categories":["Coding"],"content":"5 远程同步 # 下载远程仓库的所有变动 $ git fetch [remote] # 取回远程仓库的变化并与本地分支合并 $ git pull [remote] [branch] # 上传本地指定分支到远程仓库 $ git push [remote] [branch] # 强制上传 $ git push [remote] --force ","date":"2023-09-03","objectID":"/commongit/:6:0","tags":["git","little page"],"title":"CommonGit | 个人用常见git命令记录","uri":"/commongit/"},{"categories":["Coding"],"content":"6 撤销 # 恢复暂存区文件到工作区 $ git checkout [file] # 重置暂存区和工作区，与上一次commit保持一致 $ git reset --hard # 重置暂存区与上次commit一致，但工作区不变 $ git reset # 新增一个commit用于撤销指定commit $ git revert [commit] ","date":"2023-09-03","objectID":"/commongit/:7:0","tags":["git","little page"],"title":"CommonGit | 个人用常见git命令记录","uri":"/commongit/"},{"categories":["Summary"],"content":"简单记录下暑期学习生活的点滴日常","date":"2023-08-27","objectID":"/summersummary/","tags":["Summary","blog"],"title":"Summary | 2023 暑期总结","uri":"/summersummary/"},{"categories":["Summary"],"content":"Preface 这段时间有点偷懒，学习效率感觉没有之前那么高了。前几天本来打算更新一个最近学习 C# 的总结笔记，最终还是没能完工，还要过几天才能放出（但愿我不会拖太久）。马上也要开学了，大部分时间可能都要放在课内学习上，没工夫打理博客。不过我尽量争取每周更新一份周记（也可能变成月记），汇报一下我最近都在干什么，发生的一些有趣事情，留作个人记录，就像本篇博客一样。 ","date":"2023-08-27","objectID":"/summersummary/:1:0","tags":["Summary","blog"],"title":"Summary | 2023 暑期总结","uri":"/summersummary/"},{"categories":["Summary"],"content":"Study 先说一下我暑期都学了什么吧。 首先是 QT ，准确来说是 GUI 设计稍微入了点门，了解了诸如 signal, slot, event 等基本知识，然后利用 python 写了一个简单的视频播放器（还有些功能没完善）。学校里的创b课设要求设计实现一款带 GUI 的游戏，但我个人觉得 QT 不太适合写游戏，更适合写桌面应用（而且是那种上世纪桌面软件的风格），所以这个项目现在还一直拖着。这里点名批评一下 QT 的官方文档，我想找一个功能实现总要找半天，让人抓狂。 然后是 $\\LaTeX$ ，由于打算参加数模的关系我在暑期学了一下 $\\LaTeX$ 的语法，目前日常使用基本没太大问题。下学期的课程笔记我也打算从手写转向使用 markdown + $\\LaTeX$ 公式的方式。同时我也了解到如果使用 Typst 可能会比 $\\LaTeX$ 轻松得多，后续可能也会尝试一下。 再之后是前端知识，我是根据 MDN 的官方文档进行学习的，目前把 HTML 的相关内容看完了，CSS 看了一部分（主要这几天学习进程有点混乱，东学一点西学一点的）。事实上，我现在亟需 CSS 知识，不单是我往博客里加功能需要使用，我设计 GUI 桌面软件时 CSS 也会派上很大用场。看来现在有必要把 CSS 学习的任务优先级提高。 接着是摩登 cpp ，我稍微了解了一下现代 cpp 的相关内容（不过还没进行深入学习）。主要是学习了一下智能指针，explicit ，virtual 之类。有一说一，我在学习 c# 的过程中对 cpp 反而有了更深的认识。 最后就是 c# 了，我大概把基本语法过了一遍，接下来打算从 WPF 或是 unity 开始入门做项目。 还有一些杂七杂八的学习碎片： 日语掌握了五十音，跟着标日初学了一点点语法 稍微练了下字，整体看上去美观了一些 暑假期间一直在坚持背单词，现在看英文文档基本没太大问题，可能速度稍微慢了些。带字幕的全英视频也能看懂。不过写作和口语还是不行，这次六级也是栽在写作上。 博客搭建过程大致了解了（不然也不会有这篇博客 ","date":"2023-08-27","objectID":"/summersummary/:2:0","tags":["Summary","blog"],"title":"Summary | 2023 暑期总结","uri":"/summersummary/"},{"categories":["Summary"],"content":"Anime \u0026 Movie 这个暑假看了不少番剧，在此罗列一下（报菜名）： 奇巧出租车。画风可爱，结尾也挺震撼的，强烈安利！🥰 中二病。邪王真眼是最强的！😘 樱花庄的宠物女孩。看完后有一种很强的失落感，挺羡慕主角们之间的友情，可惜第二季属于有生之年系列了。😥 伪恋。除了男主一条乐太亚撒西令人不爽外其他观感还好，除开党争当日常番来看本作属于 top 水平了，前期乐子很多。古味直志就一画漫画的懂个p的伪恋，万里花才是天下第一！🤩 五等分的花嫁。最后剧场版还没看，不过已经大概了解结局了。幸好我推的五月没有入局😎谁会拒绝一只卡哇伊的肉包怪呢😭 我的妹妹不可能这么可爱。初见感觉与埃罗芒阿老师差不多，后来发现作者原来是同一人，那没事了。这部第一季看了一半没看下去，感觉有些剧情令人挺迷的，不过整体观感还行。后续有机会再补完吧。😇 命运石之门。神中神！目前只看了第一季，中间剧情差点把我刀死，还好撑住了。最后的发展与前面伏笔相照应真的很爽，会自然而然的发出「 哦！嗖由果多！」的声音。 石头门我哭死😭\r电影的话只看了华尔街之狼和星际穿越，都是口碑不错的电影。 ","date":"2023-08-27","objectID":"/summersummary/:3:0","tags":["Summary","blog"],"title":"Summary | 2023 暑期总结","uri":"/summersummary/"},{"categories":["Summary"],"content":"Game 稍微谈谈我在暑假遇见的几款好玩的游戏吧： 逆转裁判（ Ace Attorney ）。破案 + 剧情反转类型（没错，我就是喜欢反转 + 伏笔类作品），虽然有部分地方很容易卡关，但如果没有看剧透自己玩自己研究出破绽还是挺有成就感的。众所周知一二三代剧情是神级，各个故事线结局往往都震撼人心，有时我甚至在最后才知道凶手的真面目。 异议！\rl4d2 。宿舍欢乐局。 战地一（ battlefield 1 ）。战地我只玩了战役模式（过剧情），整体体验非常棒，很有代入感。 届不到的爱恋。目前只推了彩加线和一点点由衣线，剧情作画都很不错，唯一的遗憾就是玩家能操控的东西有限，不过毕竟是剧情向gal嘛倒也能理解。不过推一次线花的时间太长了，以后有时间再看吧。 路易吉鬼屋。解谜 + 闯关类型，画风可爱，操作简单，同时不得不承认任天堂是真的太会藏东西了（ ","date":"2023-08-27","objectID":"/summersummary/:4:0","tags":["Summary","blog"],"title":"Summary | 2023 暑期总结","uri":"/summersummary/"},{"categories":["Summary"],"content":"Daily life 暑假期间在家是家里蹲，在学校是寝室蹲，基本没怎么出门。虽然看着朋友圈里的旅游风景挺羡慕的，但是又觉得出门太累也玩不了几天（说白了就是懒）。 也就暑假前几天企业参观的时候出去看了看。 大亚湾海边风景照\r突然感觉自己的生活好单调……😥 ","date":"2023-08-27","objectID":"/summersummary/:5:0","tags":["Summary","blog"],"title":"Summary | 2023 暑期总结","uri":"/summersummary/"},{"categories":["Summary"],"content":"Conclusion 最后谈谈时下的想法吧。 学分绩。尽管我十分厌恶这种用应试分数衡量学生水平的行为，但是身处其中又不得不接受。以目前我的分数来看，距离保研还是有一定距离。果然还是要先达到保研线比较好吗？ 不想拘泥于分数考试，人应该更多的从自己的圈子向外望，看到更广阔的世界。路其实很多，怎么可能只有眼前的几条？别被条条框框约束了头脑。 不必和同龄人进行比较，认识到差距虚心学习就好，闻道有先后，术业有专攻。 不能丢弃自己的本心，没必要放弃真实的自我而特意去迎合别人的想法。为自己而活。 身边的机会很多，时机固然重要，但能抓住机会的能力更重要。我目前所需要做的，是先把握住当下力所能及的机会，并积累抓住未来更大机会的能力。 现在，我已经大概清楚自己未来的发展方向，希望自己能够坚持下去，并且不会后悔。 大学一年级，再见！ 2023.8.27 ","date":"2023-08-27","objectID":"/summersummary/:6:0","tags":["Summary","blog"],"title":"Summary | 2023 暑期总结","uri":"/summersummary/"},{"categories":["Coding"],"content":"今天中午的折腾记录","date":"2023-08-18","objectID":"/embedpython/","tags":["Python","little page"],"title":"EmbedPython | 一种py打包方式","uri":"/embedpython/"},{"categories":["Coding"],"content":"一切的起因 我最近在用 Pyside6 写一个类似视频播放器的项目，期间装了很多相关依赖。功能实现后想把程序发给别人时却遇到了难题，如果只是简单用 zip 或 rar 打包的话在对方主机上解压程序会因为缺乏相关依赖而无法运行。这就比较令人头疼了。 我最初的想法是将程序以及环境打包成 docker 镜像进行分发，但是最后因为两点原因放弃了，其一是这样打包出来的 docker 镜像可能较大，其二是我本地的开发环境是 windows 系统，虽然可以使用 WSL2 ，但是感觉使用起来会比较麻烦，甚至还要手动编写 dockerfile 。 再这之后我又上网寻找了一些 python 打包方案，或是不令人满意，或是与我的诉求不符。 最终几番轮回下我还是选择了在知乎上看到的一篇 利用Python embed方法打包的文章 ，整体看上去感觉上手难度不大，并且文章发布日期也不是很久远，所以立马动手进行操作。 ","date":"2023-08-18","objectID":"/embedpython/:1:0","tags":["Python","little page"],"title":"EmbedPython | 一种py打包方式","uri":"/embedpython/"},{"categories":["Coding"],"content":"踩坑的经过 我首先是按照教程进行操作，解压安装打包一气呵成。但是结果无法运行。 由于教程的后几步我不太理解是怎么回事，尤其是最后 download.png 部分让我完全摸不着头脑。看到寥寥几行的 bat ，我首先以为是 bat 文件中缺少了相关代码。后来在 chenx 大佬的指点下发现其实只要这两行代码就已经够了。 由于没了解问题所在，我试着按教程再重新走一遍，但是在这一遍的过程中，我忘记将 ._pth 文件删除了，所以运行时报了找不到对应依赖的 error 。在这一过程中我在 chenx 大佬的帮助下将 ._pth 文件中最下面一行注释取消了，如此一来便建立了外部链接与 python 文件之间的联系。 然而，运行结果仍然是找不到外部包，不过这一次报错的包不在是 Pyside6 ，说明大部分包还是没啥问题的。 这期间我检查了 requirements.txt ，结果发现通过 pipreqs 生成的 txt 文件内容不但不全，版本还和实际存在诸多偏差。于是我手动修改了相关包的描述，重新运行 bat 脚本。 结果这次的报错令人大跌眼镜，外部链接都全部找到了，但是我自己编写的内部链接却找不到，检查 ._pth 文件中的内容也发现当前目录 . 已经包含在 path 中了，怎么会找不到呢？这让我有些迷茫，不知所措。 但是，在我即将放弃折腾的时候，我突然意识到之前教程作者是让我们删除 ._pth 文件，而不是对它进行修改，所以我立刻执行了删除操作，并重新双击 bat 脚本。 这一次，程序完美的运行了。\r","date":"2023-08-18","objectID":"/embedpython/:2:0","tags":["Python","little page"],"title":"EmbedPython | 一种py打包方式","uri":"/embedpython/"},{"categories":["Coding"],"content":"Cumcmthesis 的入门级使用","date":"2023-08-08","objectID":"/cumcmthesis/","tags":["LaTeX","blog"],"title":"Cumcmthesis | 基于LaTeX的数模写作模板","uri":"/cumcmthesis/"},{"categories":["Coding"],"content":"基本介绍 cumcmthesis 是为全国大学生数学建模竞赛编写的 LaTeX 模板, 旨在让大家专注于论文的内容写作, 而不用花费过多精力在格式的定制和调整上. 作者已经将模板开源在 Github仓库，随取随用。该模板已经帮我们处理好了大部分论文所需要的格式，正如简介所说的，使用此模板后我们现在只要专注文章内容就可以了。 ","date":"2023-08-08","objectID":"/cumcmthesis/:1:0","tags":["LaTeX","blog"],"title":"Cumcmthesis | 基于LaTeX的数模写作模板","uri":"/cumcmthesis/"},{"categories":["Coding"],"content":"使用方法 ","date":"2023-08-08","objectID":"/cumcmthesis/:2:0","tags":["LaTeX","blog"],"title":"Cumcmthesis | 基于LaTeX的数模写作模板","uri":"/cumcmthesis/"},{"categories":["Coding"],"content":"导入 首先我们需要先将 Github仓库 clone 下来，然后将其中的 cumcmthesis.cls 文件复制到我们 $\\LaTeX$ 的工作目录中。然后在 tex 文件开头使用： \\documentclass[withoutpreface, bwprint]{cumcmthesis} 其中，[withoutpreface, bwprint] 的功能是去掉封面与编号页。 ","date":"2023-08-08","objectID":"/cumcmthesis/:2:1","tags":["LaTeX","blog"],"title":"Cumcmthesis | 基于LaTeX的数模写作模板","uri":"/cumcmthesis/"},{"categories":["Coding"],"content":"标题 很简单的一行代码：\\title{} 然后在 document 环境中使用 \\maketitle 即可。 ","date":"2023-08-08","objectID":"/cumcmthesis/:2:2","tags":["LaTeX","blog"],"title":"Cumcmthesis | 基于LaTeX的数模写作模板","uri":"/cumcmthesis/"},{"categories":["Coding"],"content":"摘要 \\begin{abstract} some contents \\keywords{foo_1 \\quad foo_2} \\end{abstract} ","date":"2023-08-08","objectID":"/cumcmthesis/:2:3","tags":["LaTeX","blog"],"title":"Cumcmthesis | 基于LaTeX的数模写作模板","uri":"/cumcmthesis/"},{"categories":["Coding"],"content":"正文 普通文字分章节正常使用 \\section 和 \\subsection 即可。 模板已经自动帮我们设定好了首行的缩进单位。 itemize 与 enumerate 缩进 以 enumerate 为例： \\begin{enumerate}[itemindent=2em] \\item some items \\end{enumerate} 这里的 itemindent=2em 设定为缩进两个字符长度。示例如图： table 表格 不得不说表格是 $\\LaTeX$ 里最麻烦的东西之一，想要画出一份好表格并不是一件容易的事。$\\LaTeX$ 自带的表格并不能很好的实现美观表格，所以需要先导入 tabularx 宏包。 下面给出我的表格代码示例： \\begin{table}[!htbp] \\caption[symbol]{符号说明及表示} \\centering \\begin{tabularx}{\\textwidth}{ \u003e{\\centering\\arraybackslash}X \u003e{\\centering\\arraybackslash}X \u003e{\\centering\\arraybackslash}X} \\toprule[1.5pt] 符号 \u0026 说明 \u0026 单位 \\\\ \\midrule[1pt] \\bottomrule[1.5pt] \\end{tabularx} \\end{table} figure 图片 图片是 $\\LaTeX$ 中的另一个讨人厌的家伙，尤其是涉及多图排版的时候。 下面分别给出我认为比较美观的图片示意代码： 单图排版： \\begin{figure}[H] \\centering \\label{fig: example} \\includegraphics[width=0.7\\textwidth]{src} \\caption{example} \\end{figure} 多图排版（ minipage ）: \\begin{figure}[H] \\begin{minipage}{0.48\\linewidth} \\centering \\label{fig: foo_1} \\includegraphics[width=3.01in]{src} \\caption{foo_1} \\end{minipage} \\hfill \\begin{minipage}{0.48\\linewidth} \\centering \\label{fig: foo_2} \\includegraphics[width=3.01in]{src} \\caption{foo_2} \\end{minipage} \\end{figure} 多图排版示意图： ","date":"2023-08-08","objectID":"/cumcmthesis/:2:4","tags":["LaTeX","blog"],"title":"Cumcmthesis | 基于LaTeX的数模写作模板","uri":"/cumcmthesis/"},{"categories":["Coding"],"content":"参考文献 参考文献的引用方式在 cumcmthesis 中被大大简化了，不需要写 bib 文件，更不需要重复编译四次，只需要一段简短的代码就可以完成： \\begin{thebibliography}{9} \\bibitem{1} some contents \\end{thebibliography} 引用内容也不需要使用特定的 bibtex 格式，用平时 word 中的常见格式就可以。 在文章中要引用的话使用 \\supercite{num} 即可。 ","date":"2023-08-08","objectID":"/cumcmthesis/:2:5","tags":["LaTeX","blog"],"title":"Cumcmthesis | 基于LaTeX的数模写作模板","uri":"/cumcmthesis/"},{"categories":["Coding"],"content":"附录 \\newpage \\begin{appendices} \\section{目录结构} a figure \\section{代码} some code \\lstinputlisting[language=code]{src} \\end{appendices} ","date":"2023-08-08","objectID":"/cumcmthesis/:2:6","tags":["LaTeX","blog"],"title":"Cumcmthesis | 基于LaTeX的数模写作模板","uri":"/cumcmthesis/"},{"categories":["Coding"],"content":"Hugo 短代码入门","date":"2023-08-04","objectID":"/shortcode/","tags":["Hugo","blog"],"title":"Hugo ShortCode | 丰富你的 Markdown","uri":"/shortcode/"},{"categories":["Coding"],"content":"Hugo ShortCode Hugo loves Markdown because of its simple content format, but there are times when Markdown falls short. Often, content authors are forced to add raw HTML (e.g., video \u003ciframe\u003e’s) to Markdown content. We think this contradicts the beautiful simplicity of Markdown’s syntax. 由 Hugo 官方文档中我们可以得知，为了在丰富 Markdown 文本的同时仍然保持其简约性，Hugo 创造了短代码对繁缛的 Html 进行替代。我们可以简单的将其理解为 Markdown 的一种插件，一种拓展语法，一个 template，它的出现为文本增添了许多新功能。 ","date":"2023-08-04","objectID":"/shortcode/:1:0","tags":["Hugo","blog"],"title":"Hugo ShortCode | 丰富你的 Markdown","uri":"/shortcode/"},{"categories":["Coding"],"content":"使用方法 短代码的常见格式为 {{% shortcode parameter %}} 或 {{\u003c shortcode parameter \u003e}} shortcode 为我们所定义的方法，具体代码需要写在 /layouts/shortcodes 文件夹中新建的同名 html 文件里；parameter 则类似 css 中的标签，可以方便我们定位 % 所包裹的代码内容会被 markdown 引擎渲染解析后再传入，而 \u003c\u003e 的代码内容不会被渲染 我们可以将其理解为 {{\u003c shortcode \u003e}} 的实质是将同名 shortcode.html 文件内容复制到 markdown 中并执行 和 Html 一样，shortcode 也有opening 和 closing 两种方式： opening: {{% shortcode %}} closing: {{% shortcode %}} A bunch of code here {{% /shortcode %}} 如果参数过长，则可以考虑用以下形式传递： {{\u003c myshortcode `This is some \u003cb\u003eHTML\u003c/b\u003e, and a new line with a \"quoted string\".` \u003e}} 下面是一个官方提供的 youtube 教程 ","date":"2023-08-04","objectID":"/shortcode/:1:1","tags":["Hugo","blog"],"title":"Hugo ShortCode | 丰富你的 Markdown","uri":"/shortcode/"},{"categories":["Coding"],"content":"简单语法 {{ .Inner }} 获取 closing shortcode 中被包裹的所有内容 {{ .Get 'foo' }} 获取参数名为 foo 的参数，注意其中 foo 两侧应该为反引号 {{ index .Params 0 }} 获取 shortcode 中的第一个参数（和 c 语言中的数组一样，以 0 为起始位） 下面以一个具体例子进行说明： 先创建 /layouts/shortcodes/abbr.html 接下来在博客的 markdown 中写入： {{\u003c abbr title=\"Yahooooooooooooooooooooooooo~\" text=\"Yaho~\" \u003e}} 现在我们便可以在之前所创建的 abbr.html 中进行编辑了，比如使用如下代码： \u003cabbr title=\"{{ .Get `title` }}\"\u003e {{ .Get `text` }} \u003c/abbr\u003e 如此一来在 ./assets/css/_custom.scss 这个自定义 css 文件中（如果你使用的也是 LoveIt 主题的话）我们就可以用 css 对刚才的代码块进行修饰，从而减轻我们在 markdown 中的书写负担（markdown 中只要写 shortcode 就行了，并且这种方法类似函数调用，复用性很高） 例子在这（把鼠标放过来看看吧~）：\rYaho~\r从官方文档我们可以发现，短代码能做的不只这些，它们组合起来可以进行很复杂的操作，条件判断，循环语句都有对应的短代码，它就像一款新的编程语言，只不过是针对博客上的元素进行操作。 并且，Hugo 官方已经帮我们实现好了不少 shortcode ，即取即用，它们被统称为 Custom shortcode，在官网可以进行查看。 另外，在 LoveIt 主题中，诸如 bilibili , music 这些短代码也已经帮我们实现好了，具体可以在 /theme/layouts/shortcodes 里查看。 网上也有不少大佬对短代码进行了整理，现在也贴在下面以供读者查看： 山茶花舍的博客 书藏的博客 ","date":"2023-08-04","objectID":"/shortcode/:1:2","tags":["Hugo","blog"],"title":"Hugo ShortCode | 丰富你的 Markdown","uri":"/shortcode/"},{"categories":["Coding"],"content":"一些插曲 在写这篇博客时，我发现无论如何 {{\u003c shortcode \u003e}} 中的短代码都会比 markdown 语法更快渲染出来，导致网页因为无法识别未定义的 shortcode 而崩溃。为此我在 Google 上查了一个多小时，没有发现任何一篇中文博客提到了这点特性。最终在我将要放弃的时候居然在 Hugo官方的Help界面 发现了问题的答案。只需写成 {{\u003c /*shortcode*/ \u003e}} 就能正常让 shortcode stop rendering 从而被正常渲染。此外，不包含 \u003c\u003e 或 % 的短代码如果加上 /* */ 反而是画蛇添足，正常书写即可。 与此同时，我在不经意间发现了 风月大佬写的将近 5 万字 Hugo 博客详解 , 让我受益匪浅，也大受震撼。 当下的互联网，太多人只是单纯从别人手中照抄照搬，这在中文互联网更是屡见不鲜。 别人的项目，稍微修改一下名字就当作自己的内容发布，这种低质量的水文遍地都是。 高质量的长篇博文却无人问津，甚至连被抄袭的可能性都失去，实在荒唐。 满地六便士，我幻想成为月亮。\r","date":"2023-08-04","objectID":"/shortcode/:1:3","tags":["Hugo","blog"],"title":"Hugo ShortCode | 丰富你的 Markdown","uri":"/shortcode/"},{"categories":["Random thoughts"],"content":"我的第一篇博客","date":"2023-08-02","objectID":"/helloworld/","tags":["blog","About me"],"title":"Hello World","uri":"/helloworld/"},{"categories":["Random thoughts"],"content":"你好，世界 个人博客让我不自觉地回忆起高中时期购买的日程本，同样的 TODO 待办，同样的个人随想， 同样的创作欲望 $\\ldots$ 只不过这次工具不再是纸和笔，读者也不再是我自己。且将新火试新茶，世界，你好！ ","date":"2023-08-02","objectID":"/helloworld/:1:0","tags":["blog","About me"],"title":"Hello World","uri":"/helloworld/"},{"categories":["Random thoughts"],"content":"大一学习生活总结 2022.8.23 大学生活的第一天，fresh and excited. 初入编程，这一段时间正在学习py， 现在回想起来只能为那段因错误学习路线而白白浪费的光阴叹息 2022.9.17 社团招新，见到了可爱的 fufu 😊 2022.9.21 初见Linux，在 chenx 大佬的帮助下安装WSL，第一次因为安装时滚动的命令行而兴奋，觉得这是一件非常 geek 的事 2022.9.23 第一次接触单片机，从学校社团里嫖到的 STM32F103C8T6 ，第一次烧录程序。虽然后来因为知识水平不够而退出，但是作为首次接触嵌入式开发，也足够了 2022.9.27 在大佬帮助下安装了 manjaro 双系统，从而在真正意义上接触到了命令行操作，第一次通过 Google 自行解决了 wifi 驱动问题，非常自豪🥰 2022.9.28 参加学校某知名地下组织举办的 Linux101 系列讲座（现已转正 2022.10.13 心理情景剧上映！（剧本很多都是我写的😋，虽然结果不如意但过程很开心 2022.11.1 第一次在实验室接线，用示波器调试 2022.11.2 Switch到货，好玩儿~~🤗 2022.11.13 校园音乐会（当然是坐在观众席 2022.12.4 powershell 美化，b 格瞬间就高起来了（ 2022.12.8 第一次接触 ChatGPT ，给我的第一感受就是震撼（当时还让 Chat 扮演猫娘来着，可惜后来被万恶的 openAI 取缔了😠） 2022.12.14 放开前夕离校，大一上校园生活结束 2022.12.15 HTML 初见，但是学习路线还是歪的 2022.12.21 生日当天阳了，发烧到 38 度😥 2023.1.18 再次学习 python ，写了几个小程序，第一次做开发 2023.1.30 第一次刷机，Redmi 8A ，twrp 刷成功了但是可能因为版本原因导致无法 root ，也就无法刷 ROM ，这点困扰了我挺久的 2023.2.6 返校，准备期末 2023.2.12 本来快要放弃了，哪成想在室友帮助下改了 A/B 分区后就刷成功了，用的 PE 系统，年轻人的第一个类原生系统，类原生赛高！ 2023.2.17 利用手机的 tumx 实现在手机上便乘，挺有趣的hh 2023.2.24 经过不竭努力下我们组的小车终于跑起来了！（Arduino + IR2104驱动） 2023.2.28 期末考破防，绩点大跌😭 2023.3.11 为了完成实验考核而自行用 SW 设计了一个机械臂（但是十分粗糙，实体估计装都装不上，不过还是挺有成就感的 2023.3.12 学校社团游园会，逛了一晚上，这应该是疫情后的第一次大型活动 2023.3.19 小车考核结束，再见了所有的自动化小车战士 2023.3.21 海鲜市场低价收了一台 ThinkPad X260 ，装了 Ubuntu 22.04（然后就放一边吃灰了 2023.3.24 第一次救砖成功！🎉 然后因为好奇刷了 Ubuntu Touch，事实证明这个系统纯纯fw 2023.4.4 大佬室友 chenx 自建了一个 MC 服务器，全宿舍联机速通了原版 MC 2023.4.28 HK 暴走一晚上，啥都没看到，腿快废了，第二天早上撑不住了搭第一班车赶回（难绷 2023.5.3 参加余中 Graduate101 项目，用 Markdown 写了一份就读指南（然而并没有骗到学弟学妹 2023.5.28 最后两星期完成了体育作业要求的 42 Km 里程 2023.6.23 期末考再次因高数破防，高数一生之敌😭 2023.6.28 学习 Qt6 项目开发 2023.7.7 学习 $\\LaTeX$ 进行论文写作 2023.8.1 开设个人博客 总的来说，在过去的一学年里我接触到了不少新知识、新技术，但是学习进度并不令人满意，而且在这期间走了不少弯路，踩了不少坑，耗费了不少青春年华。我开设这个博客的目的之一也是为了记录我在摸黑过程中踩过的坑，希望能够为后来者给予帮助。 ","date":"2023-08-02","objectID":"/helloworld/:2:0","tags":["blog","About me"],"title":"Hello World","uri":"/helloworld/"},{"categories":["Random thoughts"],"content":"8 月展望 TODO 事项： 完成 MDN 的 html 和 css 教程 争取每周更新 2–3 节数模笔记 优化博客细节 感谢你看到这里，我会继续努力！ ","date":"2023-08-02","objectID":"/helloworld/:3:0","tags":["blog","About me"],"title":"Hello World","uri":"/helloworld/"},{"categories":[],"content":"一份简短的自我介绍","date":"2023-08-02","objectID":"/about/","tags":[],"title":"About Me","uri":"/about/"},{"categories":[],"content":"\r一份简短的自我介绍 你好，我是 longlin ，在校大二新生一枚。 平时喜欢看看电影、追追番剧、打打游戏，但是又经常因为虚度光阴而遭到自己内心的谴责，所以现在正处于一种半躺状态。 啥都想学，但啥都不会。现阶段正在学习 pyside6 与 Qt6 ，打算学习前端基础知识。 ","date":"2023-08-02","objectID":"/about/:0:0","tags":[],"title":"About Me","uri":"/about/"},{"categories":[],"content":"关于这个 blog 本博客诞生于 2023.8.1 ，目的是为了记录自己在日常生活中的所见所感，整理一些学习笔记， 为将来留下一些记忆碎片。本人文学功底不足，文笔欠佳的地方还请见谅。 下面介绍一下博客的大体内容（后期将进行修改）： 所有文章：按时间编排整理博客内容 标签：整理已经发布文章的所有内容标签 分类：将已发布文章按内容进行分类 本博客基于 Hugo 框架进行搭建，使用 Loveit 主题进行装饰。 ","date":"2023-08-02","objectID":"/about/:1:0","tags":[],"title":"About Me","uri":"/about/"},{"categories":[],"content":"关于我自己的兴趣爱好随想 喜欢番剧，拒绝一切牛头人及其相关事物😠，目前在看： The 异世界轻改 咒术回战 伪恋： 不想内卷，但是又经常为绩点焦虑😣 P社战犯，但是除 EU4 和 Vic3 以外都是云玩家😋 任天堂玩家，平时玩玩马车8（找不到人一起玩😭 b站重度依赖症患者，白嫖怪，非酋 最喜欢的东西：假期 最讨厌的东西：ddl 夜猫子 $\\ldots$ 本页面会不定期进行更新，欢迎再次来访。 update time 2023.8 ","date":"2023-08-02","objectID":"/about/:2:0","tags":[],"title":"About Me","uri":"/about/"}]